#!/usr/bin/perl
use strict;
use File::Basename;

my $usage = <<USAGE;
Usage:
    perl $0 best_candidates.gff3 proteins.fasta CPUs Max_identity > best_candidates.lowIdentity.gff3

For Example:
    perl $0 best_candidates.gff3 best_candidates.fasta 24 0.80 > best_candidates.lowIdentity.gff3

    1. 程序对best_candidates.fasta进行分析，挑选出best_candidates.gff3中基因模型所对应的proteins序列，去除序列尾部可能存在的*字符，将序列信息写入到文件for_all_vs_all_blast.proteins.fasta中。
    2. 程序调用了ncbi-blast构建蛋白质数据库，然后进行了all vs all blast（evalue阈值为1e-6）；需要ncbi blast +和程序同目录下的 homolog_paraBlast 程序支持。blast 运行过程中使用24个CPU线程做并行化计算。
    3. 根据blast结果，若identity高于0.80，则去掉序列长度较短的蛋白质。
    4. 根据需要去除的蛋白信息，保留 best_candidates.gff3 中其余相似性较低的基因模型信息。

USAGE
if (@ARGV==0){die $usage}

my $path = dirname($0);

my %gene_id;
open IN, $ARGV[0] or die $!;
while (<IN>) {
    if (m/\tgene\t.*ID=([^;]+)/) {
        $gene_id{$1} = 1;
    }
}
close IN;

open IN, $ARGV[1] or die $!;
my ($id, %seq);
while (<IN>) {
    chomp;
    if (m/>(\S+)/) { $id = $1; }
    else {
        $seq{$id} .= $_;
    }
}
close IN;

open OUT, ">", "for_all_vs_all_blast.proteins.fasta" or die $!;
my %length;
foreach (sort keys %seq) {
    if (exists $gene_id{$_}) {
        my $seq = $seq{$_};
        $seq =~ s/\*$//;
        $length{$_} = length $seq;
        print OUT ">$_\n$seq\n";
        delete $gene_id{$_};
    }
}
close OUT;

foreach (sort keys %gene_id) {
    warn "Warning: Can not find the protein sequence of gene $_ in file $ARGV[1]!\n";
}

mkdir "remove_redundant_high_identity_genes.tmp" unless -e "remove_redundant_high_identity_genes.tmp";
my $pwd = `pwd`;
chomp($pwd);
chdir "remove_redundant_high_identity_genes.tmp";

my $cmdString = "makeblastdb -in $pwd/for_all_vs_all_blast.proteins.fasta -dbtype prot -title protein -parse_seqids -out protein -logfile protein.log";
print STDERR "CMD 1/2: $cmdString\n";
unless (-e "makeblastdb.ok") {
    system ($cmdString) == 0 or die "Failed to execute: $!\n";
    print STDERR "Successfully Make Blast Database of target protein sequences\n\n";
    open OK, ">", "makeblastdb.ok";
    close OK;
}
else {
    print STDERR "Skip CMD 1/2, for file makeblastdb.ok exists\n\n";
}

my $cmdString = "$path/homolog_paraBlast blastp protein $pwd/for_all_vs_all_blast.proteins.fasta 1e-6 $ARGV[2] out 6";
print STDERR "CMD 2/2: $cmdString\n";
unless (-e "blast.ok") {
    system ($cmdString) == 0 or die "Failed to execute: $!\n";
    print STDERR "Successfully blast all to all\n\n";
    open OK, ">", "blast.ok";
    close OK;
}
else {
    print STDERR "Skip CMD 2/2, for file blast.ok exists\n\n";
}

open IN, "out.tab" or die $!;
my %delete;
while (<IN>) {
    @_ = split /\t/;
    next if $_[0] eq $_[1];
    next if $_[2] < ($ARGV[3] * 100);
    if ( !exists $delete{$_[0]} && !exists $delete{$_[1]} ) {
        if ($length{$_[0]} >= $length{$_[1]}) { $delete{$_[1]} = 1; }
        elsif ($length{$_[0]} < $length{$_[1]}) { $delete{$_[0]} = 1; }
        else {
            print STDERR "Warning: No such proteins in $pwd/$ARGV[1]\n$_";
        }
    }
}
close IN;

my @redundant = keys %delete;
my $redundant = @redundant;
print STDERR "$redundant removed redundant high identity proteins are:\n";
foreach (@redundant) {
    print STDERR "$_\n";
}

open IN, "$pwd/$ARGV[0]" or die $!;
$/ = "\n\n";
while (<IN>) {
    m/\tgene\t.*?ID=(\S+?);/;
    print unless exists $delete{$1};
}
